/*
 * Azure OpenAI API
 *
 * Azure OpenAI APIs for completions and search
 *
 * The version of the OpenAPI document: 2024-05-01-preview
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ContentFilterCitedDetectionResult : Represents the outcome of a detection operation against protected resources as performed by content filtering.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ContentFilterCitedDetectionResult {
    /// A value indicating whether or not the content has been filtered.
    #[serde(rename = "filtered")]
    pub filtered: bool,
    /// A value indicating whether detection occurred, irrespective of severity or whether the content was filtered.
    #[serde(rename = "detected")]
    pub detected: bool,
    /// The internet location associated with the detection.
    #[serde(rename = "URL", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    /// The license description associated with the detection.
    #[serde(rename = "license", skip_serializing_if = "Option::is_none")]
    pub license: Option<String>,
}

impl ContentFilterCitedDetectionResult {
    /// Represents the outcome of a detection operation against protected resources as performed by content filtering.
    pub fn new(filtered: bool, detected: bool) -> ContentFilterCitedDetectionResult {
        ContentFilterCitedDetectionResult {
            filtered,
            detected,
            url: None,
            license: None,
        }
    }
}

