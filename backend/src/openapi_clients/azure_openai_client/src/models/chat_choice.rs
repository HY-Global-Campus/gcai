/*
 * Azure OpenAI API
 *
 * Azure OpenAI APIs for completions and search
 *
 * The version of the OpenAPI document: 2024-10-01-preview
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ChatChoice : The representation of a single prompt completion as part of an overall chat completions request. Generally, `n` choices are generated per provided prompt with a default value of 1. Token limits and other settings may limit the number of choices generated.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ChatChoice {
    #[serde(rename = "message", skip_serializing_if = "Option::is_none")]
    pub message: Option<Box<models::ChatResponseMessage>>,
    /// The log probability information for this choice, as enabled via the 'logprobs' request option.
    #[serde(rename = "logprobs", deserialize_with = "Option::deserialize")]
    pub logprobs: Option<Box<models::ChatChoiceLogProbabilityInfo>>,
    /// The ordered index associated with this chat completions choice.
    #[serde(rename = "index")]
    pub index: i32,
    #[serde(rename = "finish_reason")]
    pub finish_reason: models::CompletionsFinishReason,
    #[serde(rename = "delta", skip_serializing_if = "Option::is_none")]
    pub delta: Option<Box<models::ChatResponseMessage>>,
    #[serde(rename = "content_filter_results", skip_serializing_if = "Option::is_none")]
    pub content_filter_results: Option<Box<models::ContentFilterResultsForChoice>>,
    #[serde(rename = "enhancements", skip_serializing_if = "Option::is_none")]
    pub enhancements: Option<Box<models::AzureChatEnhancements>>,
}

impl ChatChoice {
    /// The representation of a single prompt completion as part of an overall chat completions request. Generally, `n` choices are generated per provided prompt with a default value of 1. Token limits and other settings may limit the number of choices generated.
    pub fn new(logprobs: Option<models::ChatChoiceLogProbabilityInfo>, index: i32, finish_reason: models::CompletionsFinishReason) -> ChatChoice {
        ChatChoice {
            message: None,
            logprobs: if let Some(x) = logprobs {Some(Box::new(x))} else {None},
            index,
            finish_reason,
            delta: None,
            content_filter_results: None,
            enhancements: None,
        }
    }
}

