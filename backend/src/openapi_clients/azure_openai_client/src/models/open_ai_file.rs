/*
 * Azure OpenAI API
 *
 * Azure OpenAI APIs for completions and search
 *
 * The version of the OpenAPI document: 2024-10-01-preview
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// OpenAiFile : Represents an assistant that can call the model and use tools.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OpenAiFile {
    /// The object type, which is always 'file'.
    #[serde(rename = "object")]
    pub object: Object,
    /// The identifier, which can be referenced in API endpoints.
    #[serde(rename = "id")]
    pub id: String,
    /// The size of the file, in bytes.
    #[serde(rename = "bytes")]
    pub bytes: i32,
    /// The name of the file.
    #[serde(rename = "filename")]
    pub filename: String,
    /// The Unix timestamp, in seconds, representing when this object was created.
    #[serde(rename = "created_at")]
    pub created_at: i32,
    #[serde(rename = "purpose")]
    pub purpose: models::FilePurpose,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<models::FileState>,
    /// The error message with details in case processing of this file failed. This field is available in Azure OpenAI only.
    #[serde(rename = "status_details", skip_serializing_if = "Option::is_none")]
    pub status_details: Option<String>,
}

impl OpenAiFile {
    /// Represents an assistant that can call the model and use tools.
    pub fn new(object: Object, id: String, bytes: i32, filename: String, created_at: i32, purpose: models::FilePurpose) -> OpenAiFile {
        OpenAiFile {
            object,
            id,
            bytes,
            filename,
            created_at,
            purpose,
            status: None,
            status_details: None,
        }
    }
}
/// The object type, which is always 'file'.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "file")]
    File,
}

impl Default for Object {
    fn default() -> Object {
        Self::File
    }
}

