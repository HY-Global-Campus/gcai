/*
 * Azure OpenAI API
 *
 * Azure OpenAI APIs for completions and search
 *
 * The version of the OpenAPI document: 2024-10-01-preview
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// EmbeddingsOptions : The configuration information for an embeddings request. Embeddings measure the relatedness of text strings and are commonly used for search, clustering, recommendations, and other similar scenarios.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct EmbeddingsOptions {
    /// An identifier for the caller or end user of the operation. This may be used for tracking or rate-limiting purposes.
    #[serde(rename = "user", skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
    /// The model name to provide as part of this embeddings request. Not applicable to Azure OpenAI, where deployment information should be included in the Azure resource URI that's connected to.
    #[serde(rename = "model", skip_serializing_if = "Option::is_none")]
    pub model: Option<String>,
    /// Input texts to get embeddings for, encoded as a an array of strings. Each input must not exceed 2048 tokens in length.  Unless you are embedding code, we suggest replacing newlines (\\n) in your input with a single space, as we have observed inferior results when newlines are present.
    #[serde(rename = "input")]
    pub input: Vec<String>,
    /// The response encoding format to use for embedding data.
    #[serde(rename = "encoding_format", skip_serializing_if = "Option::is_none")]
    pub encoding_format: Option<EncodingFormat>,
    /// The number of dimensions the resulting output embeddings should have. Only supported in `text-embedding-3` and later models.
    #[serde(rename = "dimensions", skip_serializing_if = "Option::is_none")]
    pub dimensions: Option<i32>,
    /// When using Azure OpenAI, specifies the input type to use for embedding search.
    #[serde(rename = "input_type", skip_serializing_if = "Option::is_none")]
    pub input_type: Option<String>,
}

impl EmbeddingsOptions {
    /// The configuration information for an embeddings request. Embeddings measure the relatedness of text strings and are commonly used for search, clustering, recommendations, and other similar scenarios.
    pub fn new(input: Vec<String>) -> EmbeddingsOptions {
        EmbeddingsOptions {
            user: None,
            model: None,
            input,
            encoding_format: None,
            dimensions: None,
            input_type: None,
        }
    }
}
/// The response encoding format to use for embedding data.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EncodingFormat {
    #[serde(rename = "float")]
    Float,
    #[serde(rename = "base64")]
    Base64,
}

impl Default for EncodingFormat {
    fn default() -> EncodingFormat {
        Self::Float
    }
}

