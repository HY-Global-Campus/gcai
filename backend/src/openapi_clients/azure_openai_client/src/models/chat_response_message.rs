/*
 * Azure OpenAI API
 *
 * Azure OpenAI APIs for completions and search
 *
 * The version of the OpenAPI document: 2024-10-01-preview
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ChatResponseMessage : A representation of a chat message as received in a response.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ChatResponseMessage {
    #[serde(rename = "role")]
    pub role: models::ChatRole,
    /// The refusal message generated by the model.
    #[serde(rename = "refusal", deserialize_with = "Option::deserialize")]
    pub refusal: Option<String>,
    /// The content of the message.
    #[serde(rename = "content", deserialize_with = "Option::deserialize")]
    pub content: Option<String>,
    /// The tool calls that must be resolved and have their outputs appended to subsequent input messages for the chat completions request to resolve as configured.
    #[serde(rename = "tool_calls", skip_serializing_if = "Option::is_none")]
    pub tool_calls: Option<Vec<models::ChatCompletionsToolCall>>,
    #[serde(rename = "function_call", skip_serializing_if = "Option::is_none")]
    pub function_call: Option<Box<models::FunctionCall>>,
    #[serde(rename = "context", skip_serializing_if = "Option::is_none")]
    pub context: Option<Box<models::AzureChatExtensionsMessageContext>>,
}

impl ChatResponseMessage {
    /// A representation of a chat message as received in a response.
    pub fn new(role: models::ChatRole, refusal: Option<String>, content: Option<String>) -> ChatResponseMessage {
        ChatResponseMessage {
            role,
            refusal,
            content,
            tool_calls: None,
            function_call: None,
            context: None,
        }
    }
}

