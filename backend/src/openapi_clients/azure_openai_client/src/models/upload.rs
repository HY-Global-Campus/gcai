/*
 * Azure OpenAI API
 *
 * Azure OpenAI APIs for completions and search
 *
 * The version of the OpenAPI document: 2024-10-01-preview
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Upload : The Upload object can accept byte chunks in the form of Parts.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Upload {
    /// The Upload unique identifier, which can be referenced in API endpoints.
    #[serde(rename = "id")]
    pub id: String,
    /// The Unix timestamp (in seconds) for when the Upload was created.
    #[serde(rename = "created_at")]
    pub created_at: i32,
    /// The name of the file to be uploaded.
    #[serde(rename = "filename")]
    pub filename: String,
    /// The intended number of bytes to be uploaded.
    #[serde(rename = "bytes")]
    pub bytes: i64,
    /// The intended purpose of the file.
    #[serde(rename = "purpose")]
    pub purpose: Purpose,
    /// The status of the Upload.
    #[serde(rename = "status")]
    pub status: Status,
    /// The Unix timestamp (in seconds) for when the Upload was created.
    #[serde(rename = "expires_at")]
    pub expires_at: i32,
    /// The object type, which is always \"upload\".
    #[serde(rename = "object", skip_serializing_if = "Option::is_none")]
    pub object: Option<Object>,
    /// The ready File object after the Upload is completed.
    #[serde(rename = "file", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub file: Option<Option<Box<models::OpenAiFile>>>,
}

impl Upload {
    /// The Upload object can accept byte chunks in the form of Parts.
    pub fn new(id: String, created_at: i32, filename: String, bytes: i64, purpose: Purpose, status: Status, expires_at: i32) -> Upload {
        Upload {
            id,
            created_at,
            filename,
            bytes,
            purpose,
            status,
            expires_at,
            object: None,
            file: None,
        }
    }
}
/// The intended purpose of the file.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Purpose {
    #[serde(rename = "batch")]
    Batch,
    #[serde(rename = "batch_output")]
    BatchOutput,
    #[serde(rename = "fine-tune")]
    FineTune,
    #[serde(rename = "fine-tune-results")]
    FineTuneResults,
    #[serde(rename = "assistants")]
    Assistants,
    #[serde(rename = "assistants_output")]
    AssistantsOutput,
    #[serde(rename = "vision")]
    Vision,
}

impl Default for Purpose {
    fn default() -> Purpose {
        Self::Batch
    }
}
/// The status of the Upload.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "cancelled")]
    Cancelled,
    #[serde(rename = "expired")]
    Expired,
}

impl Default for Status {
    fn default() -> Status {
        Self::Pending
    }
}
/// The object type, which is always \"upload\".
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "upload")]
    Upload,
}

impl Default for Object {
    fn default() -> Object {
        Self::Upload
    }
}

