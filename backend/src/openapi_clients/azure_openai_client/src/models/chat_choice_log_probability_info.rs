/*
 * Azure OpenAI API
 *
 * Azure OpenAI APIs for completions and search
 *
 * The version of the OpenAPI document: 2024-10-01-preview
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ChatChoiceLogProbabilityInfo : Log probability information for a choice, as requested via 'logprobs' and 'top_logprobs'.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ChatChoiceLogProbabilityInfo {
    /// The list of log probability information entries for the choice's message content tokens, as requested via the 'logprobs' option.
    #[serde(rename = "content", deserialize_with = "Option::deserialize")]
    pub content: Option<Vec<models::ChatTokenLogProbabilityResult>>,
    /// The list of log probability information entries for the choice's message refusal message tokens, as requested via the 'logprobs' option.
    #[serde(rename = "refusal", deserialize_with = "Option::deserialize")]
    pub refusal: Option<Vec<models::ChatTokenLogProbabilityResult>>,
}

impl ChatChoiceLogProbabilityInfo {
    /// Log probability information for a choice, as requested via 'logprobs' and 'top_logprobs'.
    pub fn new(content: Option<Vec<models::ChatTokenLogProbabilityResult>>, refusal: Option<Vec<models::ChatTokenLogProbabilityResult>>) -> ChatChoiceLogProbabilityInfo {
        ChatChoiceLogProbabilityInfo {
            content,
            refusal,
        }
    }
}

