/*
 * Azure OpenAI API
 *
 * Azure OpenAI APIs for completions and search
 *
 * The version of the OpenAPI document: 2024-10-01-preview
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// FileState : The state of the file.
/// The state of the file.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FileState {
    #[serde(rename = "uploaded")]
    Uploaded,
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "running")]
    Running,
    #[serde(rename = "processed")]
    Processed,
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "deleting")]
    Deleting,
    #[serde(rename = "deleted")]
    Deleted,

}

impl std::fmt::Display for FileState {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Uploaded => write!(f, "uploaded"),
            Self::Pending => write!(f, "pending"),
            Self::Running => write!(f, "running"),
            Self::Processed => write!(f, "processed"),
            Self::Error => write!(f, "error"),
            Self::Deleting => write!(f, "deleting"),
            Self::Deleted => write!(f, "deleted"),
        }
    }
}

impl Default for FileState {
    fn default() -> FileState {
        Self::Uploaded
    }
}

