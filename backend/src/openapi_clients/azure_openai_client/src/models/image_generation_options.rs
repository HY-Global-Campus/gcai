/*
 * Azure OpenAI API
 *
 * Azure OpenAI APIs for completions and search
 *
 * The version of the OpenAPI document: 2024-10-01-preview
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ImageGenerationOptions : Represents the request data used to generate images.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ImageGenerationOptions {
    /// The model name or Azure OpenAI model deployment name to use for image generation. If not specified, dall-e-2 will be inferred as a default.
    #[serde(rename = "model", skip_serializing_if = "Option::is_none")]
    pub model: Option<String>,
    /// A description of the desired images.
    #[serde(rename = "prompt")]
    pub prompt: String,
    /// The number of images to generate. Dall-e-2 models support values between 1 and 10. Dall-e-3 models only support a value of 1.
    #[serde(rename = "n", skip_serializing_if = "Option::is_none")]
    pub n: Option<i32>,
    /// The desired dimensions for generated images. Dall-e-2 models support 256x256, 512x512, or 1024x1024. Dall-e-3 models support 1024x1024, 1792x1024, or 1024x1792.
    #[serde(rename = "size", skip_serializing_if = "Option::is_none")]
    pub size: Option<Size>,
    /// The format in which image generation response items should be presented.
    #[serde(rename = "response_format", skip_serializing_if = "Option::is_none")]
    pub response_format: Option<ResponseFormat>,
    /// The desired image generation quality level to use. Only configurable with dall-e-3 models.
    #[serde(rename = "quality", skip_serializing_if = "Option::is_none")]
    pub quality: Option<Quality>,
    /// The desired image generation style to use. Only configurable with dall-e-3 models.
    #[serde(rename = "style", skip_serializing_if = "Option::is_none")]
    pub style: Option<Style>,
    /// A unique identifier representing your end-user, which can help to monitor and detect abuse.
    #[serde(rename = "user", skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

impl ImageGenerationOptions {
    /// Represents the request data used to generate images.
    pub fn new(prompt: String) -> ImageGenerationOptions {
        ImageGenerationOptions {
            model: None,
            prompt,
            n: None,
            size: None,
            response_format: None,
            quality: None,
            style: None,
            user: None,
        }
    }
}
/// The desired dimensions for generated images. Dall-e-2 models support 256x256, 512x512, or 1024x1024. Dall-e-3 models support 1024x1024, 1792x1024, or 1024x1792.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Size {
    #[serde(rename = "256x256")]
    Variant256x256,
    #[serde(rename = "512x512")]
    Variant512x512,
    #[serde(rename = "1024x1024")]
    Variant1024x1024,
    #[serde(rename = "1792x1024")]
    Variant1792x1024,
    #[serde(rename = "1024x1792")]
    Variant1024x1792,
}

impl Default for Size {
    fn default() -> Size {
        Self::Variant256x256
    }
}
/// The format in which image generation response items should be presented.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ResponseFormat {
    #[serde(rename = "url")]
    Url,
    #[serde(rename = "b64_json")]
    B64Json,
}

impl Default for ResponseFormat {
    fn default() -> ResponseFormat {
        Self::Url
    }
}
/// The desired image generation quality level to use. Only configurable with dall-e-3 models.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Quality {
    #[serde(rename = "standard")]
    Standard,
    #[serde(rename = "hd")]
    Hd,
}

impl Default for Quality {
    fn default() -> Quality {
        Self::Standard
    }
}
/// The desired image generation style to use. Only configurable with dall-e-3 models.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Style {
    #[serde(rename = "natural")]
    Natural,
    #[serde(rename = "vivid")]
    Vivid,
}

impl Default for Style {
    fn default() -> Style {
        Self::Natural
    }
}

