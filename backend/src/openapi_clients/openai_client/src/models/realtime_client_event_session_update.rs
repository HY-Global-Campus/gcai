/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// RealtimeClientEventSessionUpdate : Send this event to update the session’s default configuration. The client may  send this event at any time to update the session configuration, and any  field may be updated at any time, except for \"voice\". The server will respond  with a `session.updated` event that shows the full effective configuration.  Only fields that are present are updated, thus the correct way to clear a  field like \"instructions\" is to pass an empty string. 
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RealtimeClientEventSessionUpdate {
    /// Optional client-generated ID used to identify this event.
    #[serde(rename = "event_id", skip_serializing_if = "Option::is_none")]
    pub event_id: Option<String>,
    /// The event type, must be `session.update`.
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "session")]
    pub session: Box<models::RealtimeSession>,
}

impl RealtimeClientEventSessionUpdate {
    /// Send this event to update the session’s default configuration. The client may  send this event at any time to update the session configuration, and any  field may be updated at any time, except for \"voice\". The server will respond  with a `session.updated` event that shows the full effective configuration.  Only fields that are present are updated, thus the correct way to clear a  field like \"instructions\" is to pass an empty string. 
    pub fn new(r#type: Type, session: models::RealtimeSession) -> RealtimeClientEventSessionUpdate {
        RealtimeClientEventSessionUpdate {
            event_id: None,
            r#type,
            session: Box::new(session),
        }
    }
}
/// The event type, must be `session.update`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "session.update")]
    SessionPeriodUpdate,
}

impl Default for Type {
    fn default() -> Type {
        Self::SessionPeriodUpdate
    }
}

