/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// RealtimeServerEventConversationItemCreated : Returned when a conversation item is created. There are several scenarios that  produce this event:   - The server is generating a Response, which if successful will produce      either one or two Items, which will be of type `message`      (role `assistant`) or type `function_call`.   - The input audio buffer has been committed, either by the client or the      server (in `server_vad` mode). The server will take the content of the      input audio buffer and add it to a new user message Item.   - The client has sent a `conversation.item.create` event to add a new Item      to the Conversation. 
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RealtimeServerEventConversationItemCreated {
    /// The unique ID of the server event.
    #[serde(rename = "event_id")]
    pub event_id: String,
    /// The event type, must be `conversation.item.created`.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The ID of the preceding item in the Conversation context, allows the  client to understand the order of the conversation. 
    #[serde(rename = "previous_item_id")]
    pub previous_item_id: String,
    #[serde(rename = "item")]
    pub item: Box<models::RealtimeConversationItem>,
}

impl RealtimeServerEventConversationItemCreated {
    /// Returned when a conversation item is created. There are several scenarios that  produce this event:   - The server is generating a Response, which if successful will produce      either one or two Items, which will be of type `message`      (role `assistant`) or type `function_call`.   - The input audio buffer has been committed, either by the client or the      server (in `server_vad` mode). The server will take the content of the      input audio buffer and add it to a new user message Item.   - The client has sent a `conversation.item.create` event to add a new Item      to the Conversation. 
    pub fn new(event_id: String, r#type: Type, previous_item_id: String, item: models::RealtimeConversationItem) -> RealtimeServerEventConversationItemCreated {
        RealtimeServerEventConversationItemCreated {
            event_id,
            r#type,
            previous_item_id,
            item: Box::new(item),
        }
    }
}
/// The event type, must be `conversation.item.created`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "conversation.item.created")]
    ConversationPeriodItemPeriodCreated,
}

impl Default for Type {
    fn default() -> Type {
        Self::ConversationPeriodItemPeriodCreated
    }
}

