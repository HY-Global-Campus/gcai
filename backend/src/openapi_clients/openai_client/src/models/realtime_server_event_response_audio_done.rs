/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// RealtimeServerEventResponseAudioDone : Returned when the model-generated audio is done. Also emitted when a Response is interrupted, incomplete, or cancelled. 
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RealtimeServerEventResponseAudioDone {
    /// The unique ID of the server event.
    #[serde(rename = "event_id")]
    pub event_id: String,
    /// The event type, must be `response.audio.done`.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The ID of the response.
    #[serde(rename = "response_id")]
    pub response_id: String,
    /// The ID of the item.
    #[serde(rename = "item_id")]
    pub item_id: String,
    /// The index of the output item in the response.
    #[serde(rename = "output_index")]
    pub output_index: i32,
    /// The index of the content part in the item's content array.
    #[serde(rename = "content_index")]
    pub content_index: i32,
}

impl RealtimeServerEventResponseAudioDone {
    /// Returned when the model-generated audio is done. Also emitted when a Response is interrupted, incomplete, or cancelled. 
    pub fn new(event_id: String, r#type: Type, response_id: String, item_id: String, output_index: i32, content_index: i32) -> RealtimeServerEventResponseAudioDone {
        RealtimeServerEventResponseAudioDone {
            event_id,
            r#type,
            response_id,
            item_id,
            output_index,
            content_index,
        }
    }
}
/// The event type, must be `response.audio.done`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "response.audio.done")]
    ResponsePeriodAudioPeriodDone,
}

impl Default for Type {
    fn default() -> Type {
        Self::ResponsePeriodAudioPeriodDone
    }
}

