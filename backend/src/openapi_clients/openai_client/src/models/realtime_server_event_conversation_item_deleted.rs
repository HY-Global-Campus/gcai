/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// RealtimeServerEventConversationItemDeleted : Returned when an item in the conversation is deleted by the client with a  `conversation.item.delete` event. This event is used to synchronize the  server's understanding of the conversation history with the client's view. 
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RealtimeServerEventConversationItemDeleted {
    /// The unique ID of the server event.
    #[serde(rename = "event_id")]
    pub event_id: String,
    /// The event type, must be `conversation.item.deleted`.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The ID of the item that was deleted.
    #[serde(rename = "item_id")]
    pub item_id: String,
}

impl RealtimeServerEventConversationItemDeleted {
    /// Returned when an item in the conversation is deleted by the client with a  `conversation.item.delete` event. This event is used to synchronize the  server's understanding of the conversation history with the client's view. 
    pub fn new(event_id: String, r#type: Type, item_id: String) -> RealtimeServerEventConversationItemDeleted {
        RealtimeServerEventConversationItemDeleted {
            event_id,
            r#type,
            item_id,
        }
    }
}
/// The event type, must be `conversation.item.deleted`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "conversation.item.deleted")]
    ConversationPeriodItemPeriodDeleted,
}

impl Default for Type {
    fn default() -> Type {
        Self::ConversationPeriodItemPeriodDeleted
    }
}

