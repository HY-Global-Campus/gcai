/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// RealtimeServerEventError : Returned when an error occurs, which could be a client problem or a server  problem. Most errors are recoverable and the session will stay open, we  recommend to implementors to monitor and log error messages by default. 
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RealtimeServerEventError {
    /// The unique ID of the server event.
    #[serde(rename = "event_id")]
    pub event_id: String,
    /// The event type, must be `error`.
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "error")]
    pub error: Box<models::RealtimeServerEventErrorError>,
}

impl RealtimeServerEventError {
    /// Returned when an error occurs, which could be a client problem or a server  problem. Most errors are recoverable and the session will stay open, we  recommend to implementors to monitor and log error messages by default. 
    pub fn new(event_id: String, r#type: Type, error: models::RealtimeServerEventErrorError) -> RealtimeServerEventError {
        RealtimeServerEventError {
            event_id,
            r#type,
            error: Box::new(error),
        }
    }
}
/// The event type, must be `error`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "error")]
    Error,
}

impl Default for Type {
    fn default() -> Type {
        Self::Error
    }
}

