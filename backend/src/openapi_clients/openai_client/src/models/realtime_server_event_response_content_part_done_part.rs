/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// RealtimeServerEventResponseContentPartDonePart : The content part that is done.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RealtimeServerEventResponseContentPartDonePart {
    /// The content type (\"text\", \"audio\").
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    /// The text content (if type is \"text\").
    #[serde(rename = "text", skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
    /// Base64-encoded audio data (if type is \"audio\").
    #[serde(rename = "audio", skip_serializing_if = "Option::is_none")]
    pub audio: Option<String>,
    /// The transcript of the audio (if type is \"audio\").
    #[serde(rename = "transcript", skip_serializing_if = "Option::is_none")]
    pub transcript: Option<String>,
}

impl RealtimeServerEventResponseContentPartDonePart {
    /// The content part that is done.
    pub fn new() -> RealtimeServerEventResponseContentPartDonePart {
        RealtimeServerEventResponseContentPartDonePart {
            r#type: None,
            text: None,
            audio: None,
            transcript: None,
        }
    }
}

