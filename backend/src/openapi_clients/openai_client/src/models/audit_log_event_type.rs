/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// AuditLogEventType : The event type.
/// The event type.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AuditLogEventType {
    #[serde(rename = "api_key.created")]
    ApiKeyPeriodCreated,
    #[serde(rename = "api_key.updated")]
    ApiKeyPeriodUpdated,
    #[serde(rename = "api_key.deleted")]
    ApiKeyPeriodDeleted,
    #[serde(rename = "invite.sent")]
    InvitePeriodSent,
    #[serde(rename = "invite.accepted")]
    InvitePeriodAccepted,
    #[serde(rename = "invite.deleted")]
    InvitePeriodDeleted,
    #[serde(rename = "login.succeeded")]
    LoginPeriodSucceeded,
    #[serde(rename = "login.failed")]
    LoginPeriodFailed,
    #[serde(rename = "logout.succeeded")]
    LogoutPeriodSucceeded,
    #[serde(rename = "logout.failed")]
    LogoutPeriodFailed,
    #[serde(rename = "organization.updated")]
    OrganizationPeriodUpdated,
    #[serde(rename = "project.created")]
    ProjectPeriodCreated,
    #[serde(rename = "project.updated")]
    ProjectPeriodUpdated,
    #[serde(rename = "project.archived")]
    ProjectPeriodArchived,
    #[serde(rename = "service_account.created")]
    ServiceAccountPeriodCreated,
    #[serde(rename = "service_account.updated")]
    ServiceAccountPeriodUpdated,
    #[serde(rename = "service_account.deleted")]
    ServiceAccountPeriodDeleted,
    #[serde(rename = "rate_limit.updated")]
    RateLimitPeriodUpdated,
    #[serde(rename = "rate_limit.deleted")]
    RateLimitPeriodDeleted,
    #[serde(rename = "user.added")]
    UserPeriodAdded,
    #[serde(rename = "user.updated")]
    UserPeriodUpdated,
    #[serde(rename = "user.deleted")]
    UserPeriodDeleted,

}

impl std::fmt::Display for AuditLogEventType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::ApiKeyPeriodCreated => write!(f, "api_key.created"),
            Self::ApiKeyPeriodUpdated => write!(f, "api_key.updated"),
            Self::ApiKeyPeriodDeleted => write!(f, "api_key.deleted"),
            Self::InvitePeriodSent => write!(f, "invite.sent"),
            Self::InvitePeriodAccepted => write!(f, "invite.accepted"),
            Self::InvitePeriodDeleted => write!(f, "invite.deleted"),
            Self::LoginPeriodSucceeded => write!(f, "login.succeeded"),
            Self::LoginPeriodFailed => write!(f, "login.failed"),
            Self::LogoutPeriodSucceeded => write!(f, "logout.succeeded"),
            Self::LogoutPeriodFailed => write!(f, "logout.failed"),
            Self::OrganizationPeriodUpdated => write!(f, "organization.updated"),
            Self::ProjectPeriodCreated => write!(f, "project.created"),
            Self::ProjectPeriodUpdated => write!(f, "project.updated"),
            Self::ProjectPeriodArchived => write!(f, "project.archived"),
            Self::ServiceAccountPeriodCreated => write!(f, "service_account.created"),
            Self::ServiceAccountPeriodUpdated => write!(f, "service_account.updated"),
            Self::ServiceAccountPeriodDeleted => write!(f, "service_account.deleted"),
            Self::RateLimitPeriodUpdated => write!(f, "rate_limit.updated"),
            Self::RateLimitPeriodDeleted => write!(f, "rate_limit.deleted"),
            Self::UserPeriodAdded => write!(f, "user.added"),
            Self::UserPeriodUpdated => write!(f, "user.updated"),
            Self::UserPeriodDeleted => write!(f, "user.deleted"),
        }
    }
}

impl Default for AuditLogEventType {
    fn default() -> AuditLogEventType {
        Self::ApiKeyPeriodCreated
    }
}

