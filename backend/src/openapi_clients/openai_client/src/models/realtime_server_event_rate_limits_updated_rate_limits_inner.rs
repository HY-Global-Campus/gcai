/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RealtimeServerEventRateLimitsUpdatedRateLimitsInner {
    /// The name of the rate limit (`requests`, `tokens`).
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The maximum allowed value for the rate limit.
    #[serde(rename = "limit", skip_serializing_if = "Option::is_none")]
    pub limit: Option<i32>,
    /// The remaining value before the limit is reached.
    #[serde(rename = "remaining", skip_serializing_if = "Option::is_none")]
    pub remaining: Option<i32>,
    /// Seconds until the rate limit resets.
    #[serde(rename = "reset_seconds", skip_serializing_if = "Option::is_none")]
    pub reset_seconds: Option<f64>,
}

impl RealtimeServerEventRateLimitsUpdatedRateLimitsInner {
    pub fn new() -> RealtimeServerEventRateLimitsUpdatedRateLimitsInner {
        RealtimeServerEventRateLimitsUpdatedRateLimitsInner {
            name: None,
            limit: None,
            remaining: None,
            reset_seconds: None,
        }
    }
}

