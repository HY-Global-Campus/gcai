/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// RealtimeClientEventConversationItemCreate : Add a new Item to the Conversation's context, including messages, function  calls, and function call responses. This event can be used both to populate a  \"history\" of the conversation and to add new items mid-stream, but has the  current limitation that it cannot populate assistant audio messages.  If successful, the server will respond with a `conversation.item.created`  event, otherwise an `error` event will be sent. 
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RealtimeClientEventConversationItemCreate {
    /// Optional client-generated ID used to identify this event.
    #[serde(rename = "event_id", skip_serializing_if = "Option::is_none")]
    pub event_id: Option<String>,
    /// The event type, must be `conversation.item.create`.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The ID of the preceding item after which the new item will be inserted.  If not set, the new item will be appended to the end of the conversation.  If set, it allows an item to be inserted mid-conversation. If the ID  cannot be found, an error will be returned and the item will not be added. 
    #[serde(rename = "previous_item_id", skip_serializing_if = "Option::is_none")]
    pub previous_item_id: Option<String>,
    #[serde(rename = "item")]
    pub item: Box<models::RealtimeConversationItem>,
}

impl RealtimeClientEventConversationItemCreate {
    /// Add a new Item to the Conversation's context, including messages, function  calls, and function call responses. This event can be used both to populate a  \"history\" of the conversation and to add new items mid-stream, but has the  current limitation that it cannot populate assistant audio messages.  If successful, the server will respond with a `conversation.item.created`  event, otherwise an `error` event will be sent. 
    pub fn new(r#type: Type, item: models::RealtimeConversationItem) -> RealtimeClientEventConversationItemCreate {
        RealtimeClientEventConversationItemCreate {
            event_id: None,
            r#type,
            previous_item_id: None,
            item: Box::new(item),
        }
    }
}
/// The event type, must be `conversation.item.create`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "conversation.item.create")]
    ConversationPeriodItemPeriodCreate,
}

impl Default for Type {
    fn default() -> Type {
        Self::ConversationPeriodItemPeriodCreate
    }
}

