/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// RealtimeResponse : The response resource.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RealtimeResponse {
    /// The unique ID of the response.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The object type, must be `realtime.response`.
    #[serde(rename = "object", skip_serializing_if = "Option::is_none")]
    pub object: Option<Object>,
    /// The final status of the response (`completed`, `cancelled`, `failed`, or  `incomplete`). 
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    #[serde(rename = "status_details", skip_serializing_if = "Option::is_none")]
    pub status_details: Option<Box<models::RealtimeResponseStatusDetails>>,
    /// The list of output items generated by the response.
    #[serde(rename = "output", skip_serializing_if = "Option::is_none")]
    pub output: Option<Vec<models::RealtimeConversationItem>>,
    #[serde(rename = "usage", skip_serializing_if = "Option::is_none")]
    pub usage: Option<Box<models::RealtimeResponseUsage>>,
}

impl RealtimeResponse {
    /// The response resource.
    pub fn new() -> RealtimeResponse {
        RealtimeResponse {
            id: None,
            object: None,
            status: None,
            status_details: None,
            output: None,
            usage: None,
        }
    }
}
/// The object type, must be `realtime.response`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "realtime.response")]
    RealtimePeriodResponse,
}

impl Default for Object {
    fn default() -> Object {
        Self::RealtimePeriodResponse
    }
}
/// The final status of the response (`completed`, `cancelled`, `failed`, or  `incomplete`). 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "cancelled")]
    Cancelled,
    #[serde(rename = "failed")]
    Failed,
    #[serde(rename = "incomplete")]
    Incomplete,
}

impl Default for Status {
    fn default() -> Status {
        Self::Completed
    }
}

