/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// RealtimeClientEventResponseCancel : Send this event to cancel an in-progress response. The server will respond  with a `response.cancelled` event or an error if there is no response to  cancel. 
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RealtimeClientEventResponseCancel {
    /// Optional client-generated ID used to identify this event.
    #[serde(rename = "event_id", skip_serializing_if = "Option::is_none")]
    pub event_id: Option<String>,
    /// The event type, must be `response.cancel`.
    #[serde(rename = "type")]
    pub r#type: Type,
}

impl RealtimeClientEventResponseCancel {
    /// Send this event to cancel an in-progress response. The server will respond  with a `response.cancelled` event or an error if there is no response to  cancel. 
    pub fn new(r#type: Type) -> RealtimeClientEventResponseCancel {
        RealtimeClientEventResponseCancel {
            event_id: None,
            r#type,
        }
    }
}
/// The event type, must be `response.cancel`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "response.cancel")]
    ResponsePeriodCancel,
}

impl Default for Type {
    fn default() -> Type {
        Self::ResponsePeriodCancel
    }
}

