/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// RealtimeServerEventInputAudioBufferCommitted : Returned when an input audio buffer is committed, either by the client or  automatically in server VAD mode. The `item_id` property is the ID of the user message item that will be created, thus a `conversation.item.created` event  will also be sent to the client. 
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RealtimeServerEventInputAudioBufferCommitted {
    /// The unique ID of the server event.
    #[serde(rename = "event_id")]
    pub event_id: String,
    /// The event type, must be `input_audio_buffer.committed`.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The ID of the preceding item after which the new item will be inserted. 
    #[serde(rename = "previous_item_id")]
    pub previous_item_id: String,
    /// The ID of the user message item that will be created.
    #[serde(rename = "item_id")]
    pub item_id: String,
}

impl RealtimeServerEventInputAudioBufferCommitted {
    /// Returned when an input audio buffer is committed, either by the client or  automatically in server VAD mode. The `item_id` property is the ID of the user message item that will be created, thus a `conversation.item.created` event  will also be sent to the client. 
    pub fn new(event_id: String, r#type: Type, previous_item_id: String, item_id: String) -> RealtimeServerEventInputAudioBufferCommitted {
        RealtimeServerEventInputAudioBufferCommitted {
            event_id,
            r#type,
            previous_item_id,
            item_id,
        }
    }
}
/// The event type, must be `input_audio_buffer.committed`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "input_audio_buffer.committed")]
    InputAudioBufferPeriodCommitted,
}

impl Default for Type {
    fn default() -> Type {
        Self::InputAudioBufferPeriodCommitted
    }
}

