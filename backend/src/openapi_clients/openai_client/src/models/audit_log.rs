/*
 * OpenAI API
 *
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// AuditLog : A log of a user action or configuration change within this organization.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AuditLog {
    /// The ID of this log.
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "type")]
    pub r#type: models::AuditLogEventType,
    /// The Unix timestamp (in seconds) of the event.
    #[serde(rename = "effective_at")]
    pub effective_at: i32,
    #[serde(rename = "project", skip_serializing_if = "Option::is_none")]
    pub project: Option<Box<models::AuditLogProject>>,
    #[serde(rename = "actor")]
    pub actor: Box<models::AuditLogActor>,
    #[serde(rename = "api_key.created", skip_serializing_if = "Option::is_none")]
    pub api_key_period_created: Option<Box<models::AuditLogApiKeyCreated>>,
    #[serde(rename = "api_key.updated", skip_serializing_if = "Option::is_none")]
    pub api_key_period_updated: Option<Box<models::AuditLogApiKeyUpdated>>,
    #[serde(rename = "api_key.deleted", skip_serializing_if = "Option::is_none")]
    pub api_key_period_deleted: Option<Box<models::AuditLogApiKeyDeleted>>,
    #[serde(rename = "invite.sent", skip_serializing_if = "Option::is_none")]
    pub invite_period_sent: Option<Box<models::AuditLogInviteSent>>,
    #[serde(rename = "invite.accepted", skip_serializing_if = "Option::is_none")]
    pub invite_period_accepted: Option<Box<models::AuditLogInviteAccepted>>,
    #[serde(rename = "invite.deleted", skip_serializing_if = "Option::is_none")]
    pub invite_period_deleted: Option<Box<models::AuditLogInviteAccepted>>,
    #[serde(rename = "login.failed", skip_serializing_if = "Option::is_none")]
    pub login_period_failed: Option<Box<models::AuditLogLoginFailed>>,
    #[serde(rename = "logout.failed", skip_serializing_if = "Option::is_none")]
    pub logout_period_failed: Option<Box<models::AuditLogLoginFailed>>,
    #[serde(rename = "organization.updated", skip_serializing_if = "Option::is_none")]
    pub organization_period_updated: Option<Box<models::AuditLogOrganizationUpdated>>,
    #[serde(rename = "project.created", skip_serializing_if = "Option::is_none")]
    pub project_period_created: Option<Box<models::AuditLogProjectCreated>>,
    #[serde(rename = "project.updated", skip_serializing_if = "Option::is_none")]
    pub project_period_updated: Option<Box<models::AuditLogProjectUpdated>>,
    #[serde(rename = "project.archived", skip_serializing_if = "Option::is_none")]
    pub project_period_archived: Option<Box<models::AuditLogProjectArchived>>,
    #[serde(rename = "rate_limit.updated", skip_serializing_if = "Option::is_none")]
    pub rate_limit_period_updated: Option<Box<models::AuditLogRateLimitUpdated>>,
    #[serde(rename = "rate_limit.deleted", skip_serializing_if = "Option::is_none")]
    pub rate_limit_period_deleted: Option<Box<models::AuditLogRateLimitDeleted>>,
    #[serde(rename = "service_account.created", skip_serializing_if = "Option::is_none")]
    pub service_account_period_created: Option<Box<models::AuditLogServiceAccountCreated>>,
    #[serde(rename = "service_account.updated", skip_serializing_if = "Option::is_none")]
    pub service_account_period_updated: Option<Box<models::AuditLogServiceAccountUpdated>>,
    #[serde(rename = "service_account.deleted", skip_serializing_if = "Option::is_none")]
    pub service_account_period_deleted: Option<Box<models::AuditLogServiceAccountDeleted>>,
    #[serde(rename = "user.added", skip_serializing_if = "Option::is_none")]
    pub user_period_added: Option<Box<models::AuditLogUserAdded>>,
    #[serde(rename = "user.updated", skip_serializing_if = "Option::is_none")]
    pub user_period_updated: Option<Box<models::AuditLogUserUpdated>>,
    #[serde(rename = "user.deleted", skip_serializing_if = "Option::is_none")]
    pub user_period_deleted: Option<Box<models::AuditLogUserDeleted>>,
}

impl AuditLog {
    /// A log of a user action or configuration change within this organization.
    pub fn new(id: String, r#type: models::AuditLogEventType, effective_at: i32, actor: models::AuditLogActor) -> AuditLog {
        AuditLog {
            id,
            r#type,
            effective_at,
            project: None,
            actor: Box::new(actor),
            api_key_period_created: None,
            api_key_period_updated: None,
            api_key_period_deleted: None,
            invite_period_sent: None,
            invite_period_accepted: None,
            invite_period_deleted: None,
            login_period_failed: None,
            logout_period_failed: None,
            organization_period_updated: None,
            project_period_created: None,
            project_period_updated: None,
            project_period_archived: None,
            rate_limit_period_updated: None,
            rate_limit_period_deleted: None,
            service_account_period_created: None,
            service_account_period_updated: None,
            service_account_period_deleted: None,
            user_period_added: None,
            user_period_updated: None,
            user_period_deleted: None,
        }
    }
}

